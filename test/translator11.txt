
ibcp.exe  Copyright (C) 2010  Thunder422
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.

Table initialization successful.

Input: Z = C(A,,B)
               ^-- expected expression


Input: Z = INT(A,
                ^-- expected operator or closing parentheses


Input: Z = (A+
              ^-- expected numeric expression


Input: Z = A+
             ^-- expected numeric expression


Input: Z = (A+B
               ^-- expected operator or closing parentheses


Input: Z = (,
            ^-- expected numeric expression


Input: Z = (A,
             ^-- expected operator or closing parentheses


Input: Z = (A+,
              ^-- expected numeric expression


Input: Z = (A+A+,
                ^-- expected numeric expression


Input: Z = (A+B,
               ^-- expected operator or closing parentheses


Input: Z = MID$(A$+B$
                     ^-- expected operator or comma


Input: Z = A NOT B
             ^^^-- expected binary operator or end-of-statement


Input: Z = A + * B
               ^-- expected numeric expression


Input: Z = A + B,
                ^-- expected operator or end-of-statement


Input: Z = A,B = 1
            ^-- expected operator or end-of-statement


Input: Z+A
        ^-- expected equal or comma for assignment


Input: +Z
       ^-- expected statement


Input: -Z
       ^-- expected statement


Input: Z Y = 1
         ^-- expected equal or comma for assignment


Input: Z , A B
             ^-- expected equal or comma for assignment


Input: Z
        ^-- expected equal or comma for assignment


Input: ,Z
       ^-- expected statement


Input: Z,
         ^-- expected double variable


Input: Z,,
         ^-- expected double variable


Input: Z,Y
          ^-- expected equal or comma for assignment


Input: Z,Y,
           ^-- expected double variable


Input: Z,Y,X
            ^-- expected equal or comma for assignment


Input: Z,Y,X,
             ^-- expected double variable


Input: Z=A,
          ^-- expected operator or end-of-statement


Input: LET A
            ^-- expected equal or comma for assignment


Input: LET A,
             ^-- expected double variable


Input: Z=
         ^-- expected numeric expression


Input: Z=,
         ^-- expected numeric expression


Input: Z=+
         ^-- expected numeric expression


Input: Z=Y=
           ^-- expected numeric expression


Input: Z,Y=
           ^-- expected numeric expression


Input: Z,Y=,
           ^-- expected numeric expression


Input: LET A=
             ^-- expected numeric expression


Input: Z(
         ^-- expected numeric expression


Input: Z(,
         ^-- expected numeric expression


Input: Z,Y(
           ^-- expected numeric expression


Input: Z,Y(A
            ^-- expected equal or comma for assignment


Input: Z,Y(A,
             ^-- expected numeric expression


Input: Z,Y(A+
             ^-- expected numeric expression


Input: Z = A A
             ^-- expected operator or end-of-statement


Input: Z = (A A
              ^-- expected operator or closing parentheses


Input: Z = Arr(A A
                 ^-- expected operator, comma or closing parentheses


Input: Z = INT(A A
                 ^-- expected operator or closing parentheses


Input: Z = ASC(A$ A
                  ^-- expected operator, comma or closing parentheses


Input: Z = ASC(A$,A A
                    ^-- expected operator or closing parentheses


Input: Z$ = MID$(A$ A
                    ^-- expected operator or comma


Input: Z$ = MID$(A$,A A
                      ^-- expected operator, comma or closing parentheses


Input: Z$ = MID$(A$,A,A A
                        ^-- expected operator or closing parentheses


Input: MID$(
            ^-- expected string variable


Input: MID$(A$
              ^-- expected comma


Input: MID$(A$,
               ^-- expected numeric expression


Input: MID$(A$ B
               ^-- expected comma


Input: MID$(A$,B
                ^-- expected operator, comma or closing parentheses


Input: MID$(A$,B,
                 ^-- expected numeric expression


Input: MID$(A$,B C
                 ^-- expected operator, comma or closing parentheses


Input: MID$(A$,B,C
                  ^-- expected operator or closing parentheses


Input: MID$(A$,B,C,
                  ^-- expected operator or closing parentheses


Input: MID$(A$,B,C D
                   ^-- expected operator or closing parentheses


Input: MID$(A$,B,C)
                   ^-- expected equal or comma for assignment


Input: MID$(A$,B,C)=
                    ^-- expected expression


Input: INT(
       ^^^^-- expected statement


Input: INT(A,
       ^^^^-- expected statement


Input: INT(A)
       ^^^^-- expected statement


Input: INT(A)=
       ^^^^-- expected statement


Input: LET INT(A)=
           ^^^^-- expected item for assignment


Input: A,INT(A)=
         ^^^^-- expected double variable


Input: A=INT(A)=
                ^-- expected numeric expression


Input: INT(A)=B
       ^^^^-- expected statement


Input: LET ,
           ^-- expected item for assignment


Input: LET A,,
             ^-- expected double variable


Input: LET
          ^-- expected item for assignment


Input: Z%,
          ^-- expected integer variable


Input: Z%,,
          ^-- expected integer variable


Input: Z%,Y%,
             ^-- expected integer variable


Input: Z%,Y%,X%,
                ^-- expected integer variable


Input: LET A%,
              ^-- expected integer variable


Input: LET A%,,
              ^-- expected integer variable


Input: Z$,
          ^-- expected string item for assignment


Input: Z$,,
          ^-- expected string item for assignment


Input: Z$,Y$,
             ^-- expected string item for assignment


Input: Z$,Y$,X,
             ^-- expected string item for assignment


Input: LET A$,
              ^-- expected string item for assignment


Input: LET A$,,
              ^-- expected string item for assignment


Input: Z%=
          ^-- expected numeric expression


Input: Z%=,
          ^-- expected numeric expression


Input: Z%=+
          ^-- expected numeric expression


Input: Z%=Y%=
             ^-- expected numeric expression


Input: Z%,Y%=
             ^-- expected numeric expression


Input: Z%,Y%=,
             ^-- expected numeric expression


Input: LET A%=
              ^-- expected numeric expression


Input: Z$=
          ^-- expected numeric expression


Input: Z$=,
          ^-- expected string expression


Input: Z$=+
          ^-- expected string expression


Input: Z$=Y$=
             ^-- expected string expression


Input: Z$,Y$=
             ^-- expected string expression


Input: Z$,Y$=,
             ^-- expected string expression


Input: LET A$=
              ^-- expected string expression


Input: MID$(A$+
              ^-- expected comma


Input: MID$(A$+B$
              ^-- expected comma


Input: MID$(A$+B$,
              ^-- expected comma


Input: A(INT(B+C))=4
Output: B C + INT( A(<ref> 4 CvtDbl Assign 

Input: MID$(A$,LEFT$(B$,1)<C$)=D$
Output: A$ B$ 1 LEFT$([B$,1] C$ <$[LEFT$(,C$] MID2$(<ref>[A$,<$] D$ AssignSub$[D$] 

