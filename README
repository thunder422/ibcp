Interactive BASIC Compiler Project - README

The goal of this project is to create a new unique interactive BASIC
compiler more technically, an incremental BASIC compiler that is
interactive.  An incremental compiler has benefits interpreter
(interactivity) and a full compiler (speed).  Incremental in the fact
the each program line is compiled individually when entered.
Interactive in that the program can be run at any time without delay
since all the program lines are already compiled.

This project is currently in the design and development stage.  This
project is being developed in the C++ language.  The software is being
maintained by 'git' distributed revision control system.  This project
is built using the GNU Compiler Collection (GCC) suite, with a make file
generated by 'cmake' cross-platform, open-source make system.  This
project is currently being developed on Linux (Ubuntu based Mint 13) but
is also be tested on 32-bit Windows XP and 64-bit Windows 7.  On the
Windows system, the MinGW Minimal GNU for Windows is used for building.
The Qt toolkit is being used for development of the GUI.

Information for this project can be found at the project's blog located
at http://interactivebasiccompilerproject.blogspot.com, which contains
complete instructions on the required software and how to install it, as
well as how the build and run the project programs.  Project files can
be downloaded from https://sourceforge.net/projects/ibcp/files. The git
repository is hosted on GitHub at https://github.com/thunder422/ibcp.


Project Status
--------------
Currently, the BASIC language parser is operational.  The parser
converts text input into BASIC language tokens.

The translator is currently being developed and currently supports the
translation of BASIC expressions along a few BASIC commands (LET, PRINT,
and INPUT) into a reverse polish notation format that will be used for
fast execution of the BASIC program.

The GUI implementation has been started and now has the basic GUI
elements including file, edit and help menus with basic operation menu
items, the tool bar with several file and edit operations, an edit box
for editing the program (which emits line changes including lines
inserted and deleted) and a status bar.

The ProgramModel holds the program an updates the program as reverse polish
notation (RPN) lists, an intermediate format on its way to being compiled, as
lines are changed from the edit box.  The program now handles the BASIC
commands so far implemented in the translator (LET, PRINT and INPUT).  There is
a temporary program view dock widget used for monitoring the internal program
during development that is currently showing the translated program lines as
RPN lists.  Error messages with column and length values are show for lines
with errors.


Building The Program
--------------------
Instructions for building the program using GUI tools can be found on
the project's blog.  The procedure below assumes all the required tools
have been installed (see the blog for requirements and tool installation
instructions).  After either cloning the ibcp git repository to a
directory (default ibcp) or downloading the source and uncompressing the
zip or tar file, the project is build with a few short commands:

    cd ibcp
    mkdir build
    cd build
    cmake ..                        (Linux)
    cmake -G "MSYS Makefiles" ..    (Windows)
    make


Running Regression Tests
------------------------
To run the included regression tests, run the regtest script that was
copied into the ibcp/build directory.  The test will report whether the
tests pass or fail.  The memtest script (Linux only) will run all the
tests but also look for memory leaks (requires the valgrind program).


Command Line Options
--------------------
The -v option will output the version string and exit.  The -h or -?
option will output the usage message and exit.  No options or a single
lone file path will start the GUI.


Running Interactively
---------------------
The ibcp program can be run interactive to run either the parser or the
translator (for expressions only or full BASIC commands).  The output
from the parser are the resulting tokens.  The output from the
translator are the resulting reverse polish notation format of the
tokens.  The program is run interactively with this command:

    ibcp -tp|-te|-tt

The first character represents 'test' mode and the second stands for
parser, expression and translator.


Running In Batch
----------------
The ibcp program can run in batch by taking a text input file and
process it through the parser, expression translator, or command
translator.  The program is run in batch with this command:

    ibcp -t <file>

The beginning of the name of the file (parser, expression, or
translator) determines how the file will be processed.


Test Programs
-------------
There are several test programs contained in the test sub-directory.
These programs are built with the this command (after running cmake as
described above in the build directory):

    make tests

This commands take no command line options.  There are expected results
for these test programs in the test sub-directory.
