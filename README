Interactive BASIC Compiler Project - README

The goal of this project is to create a new unique interactive BASIC
compiler more technically, an incremental BASIC compiler that is
interactive.  An incremental compiler has benefits interpreter
(interactivity) and a full compiler (speed).  Incremental in the fact
the each program line is compiled individually when entered.
Interactive in that the program can be run at any time without delay
since all the program lines are already compiled.

This project is currently in the design and development stage.  This
project is being developed in the C++ language.  The software is being
maintained by 'git' distributed revision control system.  This project
is built using the GNU Compiler Collection (GCC) suite, with a make file
generated by 'cmake' cross-platform, open-source make system.  This
project is currently being developed on Linux (Ubuntu based Mint 13) but
is also be tested on 32-bit Windows XP and 64-bit Windows 7.  On the
Windows system, the MinGW Minimal GNU for Windows is used for building.
The Qt toolkit is being used for development of the GUI.

Information for this project can be found at the project's blog located
at http://interactivebasiccompilerproject.blogspot.com, which contains
complete instructions on the required software and how to install it, as
well as how the build and run the project programs.  Project files can
be downloaded from https://sourceforge.net/projects/ibcp/files. The git
repository is hosted on GitHub at https://github.com/thunder422/ibcp.


Project Status
--------------
Currently, the BASIC language parser is operational.  The parser
converts text input into BASIC language tokens.

The translator is currently being developed.  The LET, PRINT, INPUT and
REM commands have been implemented so far along with multiple statements
per line (separated by colons) and the translation of BASIC expressions.
The translator converts tokens from the parser into reverse polish
notation, which will allow internal program code to be created in a
format format that will allow fast execution of the BASIC program.

A basic GUI has been implemented including file, edit and help menus
with basic operation menu items, the tool bar with several file and edit
operations, an edit box for editing the program and a status bar.  The
program model implementation has been started for holding the internal
code of the program entered into the edit box.  For now the translator
has been integrated with the program model where lines entered from the
edit box are translated and stored in the program model.

There is a temporary program view dock widget used for monitoring the
internal program during development that is currently showing the
translated program lines as RPN lists.  Error messages with column and
length values are show for lines with errors.  This information is used
to highlight the errors in the edit box.  When the cursor is on the line
with an error, the error message is shown on the status bar (which also
now includes the current line number and column).  There are actions
(via menu, tool bar and key shortcuts) for moving the cursor to the next
or previous error.

The encoder converts the reverse polish notation tokens into the
internal program code that will be executed when the program is run.
The initial phase of encoder development is completed with support for
remarks, variables and constants.  Several dictionaries have been
implementing for storing the strings of the remarks, variables and
constants.  Currently only single lines are handled though the
dictionaries are maintained for all of the lines processed.


Building The Program
--------------------
Instructions for building the program using GUI tools can be found on
the project's blog.  The procedure below assumes all the required tools
have been installed (see the blog for requirements and tool installation
instructions).  After either cloning the ibcp git repository to a
directory (default ibcp) or downloading the source and uncompressing the
zip or tar file, the project is build with a few short commands:

    cd ibcp
    mkdir build
    cd build
    cmake ..                        (Linux)
    cmake -G "MSYS Makefiles" ..    (Windows)
    make

Note: The naming convention of tags in the repository has been changed
as of version 0.3.5, which may prevent older tagged versions from
building (cmake will return an error indicating the versions do not
match).  Versions prior to the 0.2 series are unaffected.
For versions 0.2.0 to 0.3.4, the commit with the corrections can be
applied using the command "git cherry-pick fa89" where fa89 is the
commit ID with the changes.  For versions 0.2-1 to 0.2-6, cmake will not
complain, however, the version string will not be output correctly.  The
corrections would need to be applied manually.


Running Regression Tests
------------------------
To run the included regression tests, run the regtest script that was
copied into the ibcp/build directory.  The test will report whether the
tests pass or fail.  The memtest script (Linux only) will run all the
tests but also look for memory leaks (requires the valgrind program).

Because the Qt libraries produce various memory errors, an error
suppression file was created to suppress these errors.  This suppression
file, ibcp.supp, is configured for a specific version of Qt, which is
the default version (4.8.2) installed in Linux Mint 13 KDE with the
kubuntu backports that upgrade KDE to 4.11.1.  When building the
application from the source, the ibcp.supp file is configured for the
version of Qt installed.  However, if running from the binary archive,
the ibcp.supp file needs to be modified for the version of the Qt
installed (which can be determined by running the application and
selecting the Help/About Qt menu item).  The ibcp.supp file should be
modified by replacing all the "4.8.2" with the version installed.


Command Line Options
--------------------
The -v option will output the version string and exit.  The -h or -?
option will output the usage message and exit.  No options or a single
lone file path will start the GUI.


Running Interactively
---------------------
The ibcp program can be run interactive to run either the parser or the
translator (for expressions only or full BASIC commands).  The output
from the parser are the resulting tokens.  The output from the
translator are the resulting reverse polish notation format of the
tokens.  The program is run interactively with this command:

    ibcp -tp|-te|-tt|-tc

The first 't' character represents 'test' mode and the second stands for
parser, expression, translator and encoder.


Running In Batch
----------------
The ibcp program can run in batch by taking a text input file and
process it through the parser, expression translator, or command
translator.  The program is run in batch with this command:

    ibcp -t <file>

The beginning of the name of the file (parser, expression, translator
or encoder) determines how the file will be processed.
